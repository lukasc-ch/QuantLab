# Copyright (c) 2019 UniMoRe, Matteo Spallanzani

import math
import torch
import torch.nn as nn

from quantlab.nets.stochastic_ops import StochasticActivation, StochasticLinear, StochasticConv2d


############################
## BASELINE ARCHITECTURES ##
############################
#
# In order for the baselines to be launched with the same logic as quantized
# models, an empty quantization scheme and an empty thermostat schedule need
# to be configured.
# To configure baseline architectures and their thermostats, use the following
# templates, replacing `topology_name` with the name of the suitable baseline
# and adding the necessary parameters to instantiate the architecture:
#
# "architecture": {
#   "class":  "`topology_name`",
#   "params": {}
# }
#
# "thermostat": {
#   "class":  "`topology_name`",
#   "params": {
#     "noise_scheme": {}
#     "bindings":     []
#   }
# }

class AlexNetBaseline(nn.Module):
    """AlexNet Convolutional Neural Network."""
    def __init__(self, capacity):
        super(AlexNetBaseline, self).__init__()
        c0 = 3
        c1 = int(64 * capacity)
        c2 = int(64 * 3 * capacity)
        c3 = int(64 * 6 * capacity)
        c4 = int(64 * 4 * capacity)
        c5 = 256
        nh = 4096
        # convolutional layers
        self.phi1_conv = nn.Conv2d(c0, c1, kernel_size=11, stride=4, padding=2, bias=False)
        self.phi1_mp   = nn.MaxPool2d(kernel_size=3, stride=2)
        self.phi1_bn   = nn.BatchNorm2d(c1)
        self.phi1_act  = nn.ReLU6()
        self.phi2_conv = nn.Conv2d(c1, c2, kernel_size=5, padding=2, bias=False)
        self.phi2_mp   = nn.MaxPool2d(kernel_size=3, stride=2)
        self.phi2_bn   = nn.BatchNorm2d(c2)
        self.phi2_act  = nn.ReLU6()
        self.phi3_conv = nn.Conv2d(c2, c3, kernel_size=3, padding=1, bias=False)
        self.phi3_bn   = nn.BatchNorm2d(c3)
        self.phi3_act  = nn.ReLU6()
        self.phi4_conv = nn.Conv2d(c3, c4, kernel_size=3, padding=1, bias=False)
        self.phi4_bn   = nn.BatchNorm2d(c4)
        self.phi4_act  = nn.ReLU6()
        self.phi5_conv = nn.Conv2d(c4, c5, kernel_size=3, padding=1, bias=False)
        self.phi5_mp   = nn.MaxPool2d(kernel_size=3, stride=2)
        self.phi5_bn   = nn.BatchNorm2d(c5)
        self.phi5_act  = nn.ReLU6()
        # dense layers
        self.phi6_fc   = nn.Linear(c5 * 6 * 6, nh, bias=False)
        self.phi6_bn   = nn.BatchNorm1d(nh)
        self.phi6_act  = nn.ReLU6()
        self.phi7_fc   = nn.Linear(nh, nh, bias=False)
        self.phi7_bn   = nn.BatchNorm1d(nh)
        self.phi7_act  = nn.ReLU6()
        self.phi8_fc   = nn.Linear(nh, 1000)

    def forward(self, x):
        x = self.phi1_conv(x)
        x = self.phi1_mp(x)
        x = self.phi1_bn(x)
        x = self.phi1_act(x)
        x = self.phi2_conv(x)
        x = self.phi2_mp(x)
        x = self.phi2_bn(x)
        x = self.phi2_act(x)
        x = self.phi3_conv(x)
        x = self.phi3_bn(x)
        x = self.phi3_act(x)
        x = self.phi4_conv(x)
        x = self.phi4_bn(x)
        x = self.phi4_act(x)
        x = self.phi5_conv(x)
        x = self.phi5_mp(x)
        x = self.phi5_bn(x)
        x = self.phi5_act(x)
        x = x.view(-1, torch.Tensor(list(x.size()[-3:])).to(torch.int32).prod().item())
        x = self.phi6_fc(x)
        x = self.phi6_bn(x)
        x = self.phi6_act(x)
        x = self.phi7_fc(x)
        x = self.phi7_bn(x)
        x = self.phi7_act(x)
        x = self.phi8_fc(x)
        return x

    def forward_with_tensor_stats(self, x):
        stats = []
        x = self.phi1_conv(x)
        stats.append(('phi1_conv_w', self.phi1_conv.weight.data))
        x = self.phi1_mp(x)
        x = self.phi1_bn(x)
        x = self.phi1_act(x)
        x = self.phi2_conv(x)
        stats.append(('phi2_conv_w', self.phi2_conv.weight.data))
        x = self.phi2_mp(x)
        x = self.phi2_bn(x)
        x = self.phi2_act(x)
        x = self.phi3_conv(x)
        stats.append(('phi3_conv_w', self.phi3_conv.weight.data))
        x = self.phi3_bn(x)
        x = self.phi3_act(x)
        x = self.phi4_conv(x)
        stats.append(('phi4_conv_w', self.phi4_conv.weight.data))
        x = self.phi4_bn(x)
        x = self.phi4_act(x)
        x = self.phi5_conv(x)
        stats.append(('phi5_conv_w', self.phi5_conv.weight.data))
        x = self.phi5_mp(x)
        x = self.phi5_bn(x)
        x = self.phi5_act(x)
        x = x.view(-1, torch.Tensor(list(x.size()[-3:])).to(torch.int32).prod().item())
        x = self.phi6_fc(x)
        stats.append(('phi6_fc_w', self.phi6_fc.weight.data))
        x = self.phi6_bn(x)
        x = self.phi6_act(x)
        x = self.phi7_fc(x)
        stats.append(('phi7_fc_w', self.phi7_fc.weight.data))
        x = self.phi7_bn(x)
        x = self.phi7_act(x)
        x = self.phi8_fc(x)
        stats.append(('phi8_fc_w', self.phi8_fc.weight.data))
        return x, stats


class MobileNetV2Baseline(nn.Module):
    """MobileNetv2 Convolutional Neural Network."""
    def __init__(self, capacity, expansion):
        super(MobileNetV2Baseline, self).__init__()
        c0 = 3
        t0 = int(32 * capacity) * 1
        c1 = int(16 * capacity)
        t1 = c1 * expansion
        c2 = int(24 * capacity)
        t2 = c2 * expansion
        c3 = int(32 * capacity)
        t3 = c3 * expansion
        c4 = int(64 * capacity)
        t4 = c4 * expansion
        c5 = int(96 * capacity)
        t5 = c5 * expansion
        c6 = int(160 * capacity)
        t6 = c6 * expansion
        c7 = int(320 * capacity)
        c8 = max(int(1280 * capacity), 1280)
        # first block
        self.phi01_conv = nn.Conv2d(c0, t0, kernel_size=3, stride=2, padding=1, bias=False)
        self.phi01_bn   = nn.BatchNorm2d(t0)
        self.phi01_act  = nn.ReLU6(inplace=True)
        self.phi02_conv = nn.Conv2d(t0, t0, kernel_size=3, stride=1, padding=1, groups=t0, bias=False)
        self.phi02_bn   = nn.BatchNorm2d(t0)
        self.phi02_act  = nn.ReLU6(inplace=True)
        self.phi03_conv = nn.Conv2d(t0, c1, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi03_bn   = nn.BatchNorm2d(c1)
        # second block
        self.phi04_conv = nn.Conv2d(c1, t1, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi04_bn   = nn.BatchNorm2d(t1)
        self.phi04_act  = nn.ReLU6(inplace=True)
        self.phi05_conv = nn.Conv2d(t1, t1, kernel_size=3, stride=2, padding=1, groups=t1, bias=False)
        self.phi05_bn   = nn.BatchNorm2d(t1)
        self.phi05_act  = nn.ReLU6(inplace=True)
        self.phi06_conv = nn.Conv2d(t1, c2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi06_bn   = nn.BatchNorm2d(c2)
        self.phi07_conv = nn.Conv2d(c2, t2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi07_bn   = nn.BatchNorm2d(t2)
        self.phi07_act  = nn.ReLU6(inplace=True)
        self.phi08_conv = nn.Conv2d(t2, t2, kernel_size=3, stride=1, padding=1, groups=t2, bias=False)
        self.phi08_bn   = nn.BatchNorm2d(t2)
        self.phi08_act  = nn.ReLU6(inplace=True)
        self.phi09_conv = nn.Conv2d(t2, c2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi09_bn   = nn.BatchNorm2d(c2)
        # third block
        self.phi10_conv = nn.Conv2d(c2, t2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi10_bn   = nn.BatchNorm2d(t2)
        self.phi10_act  = nn.ReLU6(inplace=True)
        self.phi11_conv = nn.Conv2d(t2, t2, kernel_size=3, stride=2, padding=1, groups=t2, bias=False)
        self.phi11_bn   = nn.BatchNorm2d(t2)
        self.phi11_act  = nn.ReLU6(inplace=True)
        self.phi12_conv = nn.Conv2d(t2, c3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi12_bn   = nn.BatchNorm2d(c3)
        self.phi13_conv = nn.Conv2d(c3, t3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi13_bn   = nn.BatchNorm2d(t3)
        self.phi13_act  = nn.ReLU6(inplace=True)
        self.phi14_conv = nn.Conv2d(t3, t3, kernel_size=3, stride=1, padding=1, groups=t3, bias=False)
        self.phi14_bn   = nn.BatchNorm2d(t3)
        self.phi14_act  = nn.ReLU6(inplace=True)
        self.phi15_conv = nn.Conv2d(t3, c3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi15_bn   = nn.BatchNorm2d(c3)
        self.phi16_conv = nn.Conv2d(c3, t3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi16_bn   = nn.BatchNorm2d(t3)
        self.phi16_act  = nn.ReLU6(t3)
        self.phi17_conv = nn.Conv2d(t3, t3, kernel_size=3, stride=1, padding=1, groups=t3, bias=False)
        self.phi17_bn   = nn.BatchNorm2d(t3)
        self.phi17_act  = nn.ReLU6(inplace=True)
        self.phi18_conv = nn.Conv2d(t3, c3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi18_bn   = nn.BatchNorm2d(c3)
        # fourth block
        self.phi19_conv = nn.Conv2d(c3, t3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi19_bn   = nn.BatchNorm2d(t3)
        self.phi19_act  = nn.ReLU6(inplace=True)
        self.phi20_conv = nn.Conv2d(t3, t3, kernel_size=3, stride=2, padding=1, groups=t3, bias=False)
        self.phi20_bn   = nn.BatchNorm2d(t3)
        self.phi20_act  = nn.ReLU6(inplace=True)
        self.phi21_conv = nn.Conv2d(t3, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi21_bn   = nn.BatchNorm2d(c4)
        self.phi22_conv = nn.Conv2d(c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi22_bn   = nn.BatchNorm2d(t4)
        self.phi22_act  = nn.ReLU6(inplace=True)
        self.phi23_conv = nn.Conv2d(t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi23_bn   = nn.BatchNorm2d(t4)
        self.phi23_act  = nn.ReLU6(inplace=True)
        self.phi24_conv = nn.Conv2d(t4, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi24_bn   = nn.BatchNorm2d(c4)
        self.phi25_conv = nn.Conv2d(c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi25_bn   = nn.BatchNorm2d(t4)
        self.phi25_act  = nn.ReLU6(inplace=True)
        self.phi26_conv = nn.Conv2d(t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi26_bn   = nn.BatchNorm2d(t4)
        self.phi26_act  = nn.ReLU6(inplace=True)
        self.phi27_conv = nn.Conv2d(t4, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi27_bn   = nn.BatchNorm2d(c4)
        self.phi28_conv = nn.Conv2d(c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi28_bn   = nn.BatchNorm2d(t4)
        self.phi28_act  = nn.ReLU6(inplace=True)
        self.phi29_conv = nn.Conv2d(t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi29_bn   = nn.BatchNorm2d(t4)
        self.phi29_act  = nn.ReLU6(inplace=True)
        self.phi30_conv = nn.Conv2d(t4, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi30_bn   = nn.BatchNorm2d(c4)
        # fifth block
        self.phi31_conv = nn.Conv2d(c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi31_bn   = nn.BatchNorm2d(t4)
        self.phi31_act  = nn.ReLU6(inplace=True)
        self.phi32_conv = nn.Conv2d(t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi32_bn   = nn.BatchNorm2d(t4)
        self.phi32_act  = nn.ReLU6(inplace=True)
        self.phi33_conv = nn.Conv2d(t4, c5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi33_bn   = nn.BatchNorm2d(c5)
        self.phi34_conv = nn.Conv2d(c5, t5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi34_bn   = nn.BatchNorm2d(t5)
        self.phi34_act  = nn.ReLU6(inplace=True)
        self.phi35_conv = nn.Conv2d(t5, t5, kernel_size=3, stride=1, padding=1, groups=t5, bias=False)
        self.phi35_bn   = nn.BatchNorm2d(t5)
        self.phi35_act  = nn.ReLU6(inplace=True)
        self.phi36_conv = nn.Conv2d(t5, c5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi36_bn   = nn.BatchNorm2d(c5)
        self.phi37_conv = nn.Conv2d(c5, t5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi37_bn   = nn.BatchNorm2d(t5)
        self.phi37_act  = nn.ReLU6(inplace=True)
        self.phi38_conv = nn.Conv2d(t5, t5, kernel_size=3, stride=1, padding=1, groups=t5, bias=False)
        self.phi38_bn   = nn.BatchNorm2d(t5)
        self.phi38_act  = nn.ReLU6(inplace=True)
        self.phi39_conv = nn.Conv2d(t5, c5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi39_bn   = nn.BatchNorm2d(c5)
        # sixth block
        self.phi40_conv = nn.Conv2d(c5, t5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi40_bn   = nn.BatchNorm2d(t5)
        self.phi40_act  = nn.ReLU6(inplace=True)
        self.phi41_conv = nn.Conv2d(t5, t5, kernel_size=3, stride=2, padding=1, groups=t5, bias=False)
        self.phi41_bn   = nn.BatchNorm2d(t5)
        self.phi41_act  = nn.ReLU6(inplace=True)
        self.phi42_conv = nn.Conv2d(t5, c6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi42_bn   = nn.BatchNorm2d(c6)
        self.phi43_conv = nn.Conv2d(c6, t6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi43_bn   = nn.BatchNorm2d(t6)
        self.phi43_act  = nn.ReLU6(inplace=True)
        self.phi44_conv = nn.Conv2d(t6, t6, kernel_size=3, stride=1, padding=1, groups=t6, bias=False)
        self.phi44_bn   = nn.BatchNorm2d(t6)
        self.phi44_act  = nn.ReLU6(inplace=True)
        self.phi45_conv = nn.Conv2d(t6, c6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi45_bn   = nn.BatchNorm2d(c6)
        self.phi46_conv = nn.Conv2d(c6, t6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi46_bn   = nn.BatchNorm2d(t6)
        self.phi46_act  = nn.ReLU6(inplace=True)
        self.phi47_conv = nn.Conv2d(t6, t6, kernel_size=3, stride=1, padding=1, groups=t6, bias=False)
        self.phi47_bn   = nn.BatchNorm2d(t6)
        self.phi47_act  = nn.ReLU6(inplace=True)
        self.phi48_conv = nn.Conv2d(t6, c6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi48_bn   = nn.BatchNorm2d(c6)
        # seventh block
        self.phi49_conv = nn.Conv2d(c6, t6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi49_bn   = nn.BatchNorm2d(t6)
        self.phi49_act  = nn.ReLU6(inplace=True)
        self.phi50_conv = nn.Conv2d(t6, t6, kernel_size=3, stride=1, padding=1, groups=t6, bias=False)
        self.phi50_bn   = nn.BatchNorm2d(t6)
        self.phi50_act  = nn.ReLU6(inplace=True)
        self.phi51_conv = nn.Conv2d(t6, c7, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi51_bn   = nn.BatchNorm2d(c7)
        # classifier
        self.phi52_conv = nn.Conv2d(c7, c8, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi52_bn   = nn.BatchNorm2d(c8)
        self.phi52_act  = nn.ReLU6(inplace=True)
        self.phi53_avg  = nn.AvgPool2d(kernel_size=7, stride=1, padding=0)
        self.phi53_fc   = nn.Linear(c8, 1000)

        self._initialize_weights()

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
                if m.bias is not None:
                    m.bias.data.zero_()
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()
            elif isinstance(m, nn.Linear):
                m.weight.data.normal_(0, 0.01)
                m.bias.data.zero_()

    def forward(self, x):
        # first block
        x     = self.phi01_conv(x)
        x     = self.phi01_bn(x)
        x     = self.phi01_act(x)
        x     = self.phi02_conv(x)
        x     = self.phi02_bn(x)
        x     = self.phi02_act(x)
        x     = self.phi03_conv(x)
        x     = self.phi03_bn(x)
        # second block
        x     = self.phi04_conv(x)
        x     = self.phi04_bn(x)
        x     = self.phi04_act(x)
        x     = self.phi05_conv(x)
        x     = self.phi05_bn(x)
        x     = self.phi05_act(x)
        x     = self.phi06_conv(x)
        x     = self.phi06_bn(x)
        x_res = self.phi07_conv(x)
        x_res = self.phi07_bn(x_res)
        x_res = self.phi07_act(x_res)
        x_res = self.phi08_conv(x_res)
        x_res = self.phi08_bn(x_res)
        x_res = self.phi08_act(x_res)
        x_res = self.phi09_conv(x_res)
        x_res = self.phi09_bn(x_res)
        x     = x + x_res
        # third block
        x     = self.phi10_conv(x)
        x     = self.phi10_bn(x)
        x     = self.phi10_act(x)
        x     = self.phi11_conv(x)
        x     = self.phi11_bn(x)
        x     = self.phi11_act(x)
        x     = self.phi12_conv(x)
        x     = self.phi12_bn(x)
        x_res = self.phi13_conv(x)
        x_res = self.phi13_bn(x_res)
        x_res = self.phi13_act(x_res)
        x_res = self.phi14_conv(x_res)
        x_res = self.phi14_bn(x_res)
        x_res = self.phi14_act(x_res)
        x_res = self.phi15_conv(x_res)
        x_res = self.phi15_bn(x_res)
        x     = x + x_res
        x_res = self.phi16_conv(x)
        x_res = self.phi16_bn(x_res)
        x_res = self.phi16_act(x_res)
        x_res = self.phi17_conv(x_res)
        x_res = self.phi17_bn(x_res)
        x_res = self.phi17_act(x_res)
        x_res = self.phi18_conv(x_res)
        x_res = self.phi18_bn(x_res)
        x     = x + x_res
        # fourth block
        x     = self.phi19_conv(x)
        x     = self.phi19_bn(x)
        x     = self.phi19_act(x)
        x     = self.phi20_conv(x)
        x     = self.phi20_bn(x)
        x     = self.phi20_act(x)
        x     = self.phi21_conv(x)
        x     = self.phi21_bn(x)
        x_res = self.phi22_conv(x)
        x_res = self.phi22_bn(x_res)
        x_res = self.phi22_act(x_res)
        x_res = self.phi23_conv(x_res)
        x_res = self.phi23_bn(x_res)
        x_res = self.phi23_act(x_res)
        x_res = self.phi24_conv(x_res)
        x_res = self.phi24_bn(x_res)
        x     = x + x_res
        x_res = self.phi25_conv(x)
        x_res = self.phi25_bn(x_res)
        x_res = self.phi25_act(x_res)
        x_res = self.phi26_conv(x_res)
        x_res = self.phi26_bn(x_res)
        x_res = self.phi26_act(x_res)
        x_res = self.phi27_conv(x_res)
        x_res = self.phi27_bn(x_res)
        x     = x + x_res
        x_res = self.phi28_conv(x)
        x_res = self.phi28_bn(x_res)
        x_res = self.phi28_act(x_res)
        x_res = self.phi29_conv(x_res)
        x_res = self.phi29_bn(x_res)
        x_res = self.phi29_act(x_res)
        x_res = self.phi30_conv(x_res)
        x_res = self.phi30_bn(x_res)
        x     = x + x_res
        # fifth block
        x     = self.phi31_conv(x)
        x     = self.phi31_bn(x)
        x     = self.phi31_act(x)
        x     = self.phi32_conv(x)
        x     = self.phi32_bn(x)
        x     = self.phi32_act(x)
        x     = self.phi33_conv(x)
        x     = self.phi33_bn(x)
        x_res = self.phi34_conv(x)
        x_res = self.phi34_bn(x_res)
        x_res = self.phi34_act(x_res)
        x_res = self.phi35_conv(x_res)
        x_res = self.phi35_bn(x_res)
        x_res = self.phi35_act(x_res)
        x_res = self.phi36_conv(x_res)
        x_res = self.phi36_bn(x_res)
        x     = x + x_res
        x_res = self.phi37_conv(x)
        x_res = self.phi37_bn(x_res)
        x_res = self.phi37_act(x_res)
        x_res = self.phi38_conv(x_res)
        x_res = self.phi38_bn(x_res)
        x_res = self.phi38_act(x_res)
        x_res = self.phi39_conv(x_res)
        x_res = self.phi39_bn(x_res)
        x     = x + x_res
        # sixth block
        x     = self.phi40_conv(x)
        x     = self.phi40_bn(x)
        x     = self.phi40_act(x)
        x     = self.phi41_conv(x)
        x     = self.phi41_bn(x)
        x     = self.phi41_act(x)
        x     = self.phi42_conv(x)
        x     = self.phi42_bn(x)
        x_res = self.phi43_conv(x)
        x_res = self.phi43_bn(x_res)
        x_res = self.phi43_act(x_res)
        x_res = self.phi44_conv(x_res)
        x_res = self.phi44_bn(x_res)
        x_res = self.phi44_act(x_res)
        x_res = self.phi45_conv(x_res)
        x_res = self.phi45_bn(x_res)
        x     = x + x_res
        x_res = self.phi46_conv(x)
        x_res = self.phi46_bn(x_res)
        x_res = self.phi46_act(x_res)
        x_res = self.phi47_conv(x_res)
        x_res = self.phi47_bn(x_res)
        x_res = self.phi47_act(x_res)
        x_res = self.phi48_conv(x_res)
        x_res = self.phi48_bn(x_res)
        x     = x + x_res
        # seventh block
        x     = self.phi49_conv(x)
        x     = self.phi49_bn(x)
        x     = self.phi49_act(x)
        x     = self.phi50_conv(x)
        x     = self.phi50_bn(x)
        x     = self.phi50_act(x)
        x     = self.phi51_conv(x)
        x     = self.phi51_bn(x)
        # classifier
        x     = self.phi52_conv(x)
        x     = self.phi52_bn(x)
        x     = self.phi52_act(x)
        x     = self.phi53_avg(x)
        x     = x.view(x.size(0), -1)
        x     = self.phi53_fc(x)
        return x

    def forward_with_tensor_stats(self, x):
        stats = []
        # first block
        x     = self.phi01_conv(x)
        x     = self.phi01_bn(x)
        x     = self.phi01_act(x)
        x     = self.phi02_conv(x)
        x     = self.phi02_bn(x)
        x     = self.phi02_act(x)
        x     = self.phi03_conv(x)
        x     = self.phi03_bn(x)
        # second block
        x     = self.phi04_conv(x)
        x     = self.phi04_bn(x)
        x     = self.phi04_act(x)
        x     = self.phi05_conv(x)
        x     = self.phi05_bn(x)
        x     = self.phi05_act(x)
        x     = self.phi06_conv(x)
        x     = self.phi06_bn(x)
        x_res = self.phi07_conv(x)
        x_res = self.phi07_bn(x_res)
        x_res = self.phi07_act(x_res)
        x_res = self.phi08_conv(x_res)
        x_res = self.phi08_bn(x_res)
        x_res = self.phi08_act(x_res)
        x_res = self.phi09_conv(x_res)
        x_res = self.phi09_bn(x_res)
        x     = x + x_res
        # third block
        x     = self.phi10_conv(x)
        x     = self.phi10_bn(x)
        x     = self.phi10_act(x)
        x     = self.phi11_conv(x)
        x     = self.phi11_bn(x)
        x     = self.phi11_act(x)
        x     = self.phi12_conv(x)
        x     = self.phi12_bn(x)
        x_res = self.phi13_conv(x)
        x_res = self.phi13_bn(x_res)
        x_res = self.phi13_act(x_res)
        x_res = self.phi14_conv(x_res)
        x_res = self.phi14_bn(x_res)
        x_res = self.phi14_act(x_res)
        x_res = self.phi15_conv(x_res)
        x_res = self.phi15_bn(x_res)
        x     = x + x_res
        x_res = self.phi16_conv(x)
        x_res = self.phi16_bn(x_res)
        x_res = self.phi16_act(x_res)
        x_res = self.phi17_conv(x_res)
        x_res = self.phi17_bn(x_res)
        x_res = self.phi17_act(x_res)
        x_res = self.phi18_conv(x_res)
        x_res = self.phi18_bn(x_res)
        x     = x + x_res
        # fourth block
        x     = self.phi19_conv(x)
        x     = self.phi19_bn(x)
        x     = self.phi19_act(x)
        x     = self.phi20_conv(x)
        x     = self.phi20_bn(x)
        x     = self.phi20_act(x)
        x     = self.phi21_conv(x)
        x     = self.phi21_bn(x)
        x_res = self.phi22_conv(x)
        x_res = self.phi22_bn(x_res)
        x_res = self.phi22_act(x_res)
        x_res = self.phi23_conv(x_res)
        x_res = self.phi23_bn(x_res)
        x_res = self.phi23_act(x_res)
        x_res = self.phi24_conv(x_res)
        x_res = self.phi24_bn(x_res)
        x     = x + x_res
        x_res = self.phi25_conv(x)
        x_res = self.phi25_bn(x_res)
        x_res = self.phi25_act(x_res)
        x_res = self.phi26_conv(x_res)
        x_res = self.phi26_bn(x_res)
        x_res = self.phi26_act(x_res)
        x_res = self.phi27_conv(x_res)
        x_res = self.phi27_bn(x_res)
        x     = x + x_res
        x_res = self.phi28_conv(x)
        x_res = self.phi28_bn(x_res)
        x_res = self.phi28_act(x_res)
        x_res = self.phi29_conv(x_res)
        x_res = self.phi29_bn(x_res)
        x_res = self.phi29_act(x_res)
        x_res = self.phi30_conv(x_res)
        x_res = self.phi30_bn(x_res)
        x     = x + x_res
        # fifth block
        x     = self.phi31_conv(x)
        x     = self.phi31_bn(x)
        x     = self.phi31_act(x)
        x     = self.phi32_conv(x)
        x     = self.phi32_bn(x)
        x     = self.phi32_act(x)
        x     = self.phi33_conv(x)
        x     = self.phi33_bn(x)
        x_res = self.phi34_conv(x)
        x_res = self.phi34_bn(x_res)
        x_res = self.phi34_act(x_res)
        x_res = self.phi35_conv(x_res)
        x_res = self.phi35_bn(x_res)
        x_res = self.phi35_act(x_res)
        x_res = self.phi36_conv(x_res)
        x_res = self.phi36_bn(x_res)
        x     = x + x_res
        x_res = self.phi37_conv(x)
        x_res = self.phi37_bn(x_res)
        x_res = self.phi37_act(x_res)
        x_res = self.phi38_conv(x_res)
        x_res = self.phi38_bn(x_res)
        x_res = self.phi38_act(x_res)
        x_res = self.phi39_conv(x_res)
        x_res = self.phi39_bn(x_res)
        x     = x + x_res
        # sixth block
        x     = self.phi40_conv(x)
        x     = self.phi40_bn(x)
        x     = self.phi40_act(x)
        x     = self.phi41_conv(x)
        x     = self.phi41_bn(x)
        x     = self.phi41_act(x)
        x     = self.phi42_conv(x)
        x     = self.phi42_bn(x)
        x_res = self.phi43_conv(x)
        x_res = self.phi43_bn(x_res)
        x_res = self.phi43_act(x_res)
        x_res = self.phi44_conv(x_res)
        x_res = self.phi44_bn(x_res)
        x_res = self.phi44_act(x_res)
        x_res = self.phi45_conv(x_res)
        x_res = self.phi45_bn(x_res)
        x     = x + x_res
        x_res = self.phi46_conv(x)
        x_res = self.phi46_bn(x_res)
        x_res = self.phi46_act(x_res)
        x_res = self.phi47_conv(x_res)
        x_res = self.phi47_bn(x_res)
        x_res = self.phi47_act(x_res)
        x_res = self.phi48_conv(x_res)
        x_res = self.phi48_bn(x_res)
        x     = x + x_res
        # seventh block
        x     = self.phi49_conv(x)
        x     = self.phi49_bn(x)
        x     = self.phi49_act(x)
        x     = self.phi50_conv(x)
        x     = self.phi50_bn(x)
        x     = self.phi50_act(x)
        x     = self.phi51_conv(x)
        x     = self.phi51_bn(x)
        # classifier
        x     = self.phi52_conv(x)
        x     = self.phi52_bn(x)
        x     = self.phi52_act(x)
        x     = self.phi53_avg(x)
        x     = x.view(x.size(0), -1)
        x     = self.phi53_fc(x)
        return x, stats


#############################
## QUANTIZED ARCHITECTURES ##
#############################

class AlexNet(nn.Module):
    """Quantized AlexNet (both weights and activations)."""
    def __init__(self, capacity, quant_scheme):
        super(AlexNet, self).__init__()
        c0 = 3
        c1 = int(64 * capacity)
        c2 = int(64 * 3 * capacity)
        c3 = int(64 * 6 * capacity)
        c4 = int(64 * 4 * capacity)
        c5 = 256
        nh = 4096
        # convolutional layers
        self.phi1_conv = StochasticConv2d(*quant_scheme['phi1_conv'], c0, c1, kernel_size=11, stride=4, padding=2, bias=False)
        self.phi1_mp   = nn.MaxPool2d(kernel_size=3, stride=2)
        self.phi1_bn   = nn.BatchNorm2d(c1)
        self.phi1_act  = StochasticActivation(*quant_scheme['phi1_act'], c1)
        self.phi2_conv = StochasticConv2d(*quant_scheme['phi2_conv'], c1, c2, kernel_size=5, padding=2, bias=False)
        self.phi2_mp   = nn.MaxPool2d(kernel_size=3, stride=2)
        self.phi2_bn   = nn.BatchNorm2d(c2)
        self.phi2_act  = StochasticActivation(*quant_scheme['phi2_act'], c2)
        self.phi3_conv = StochasticConv2d(*quant_scheme['phi3_conv'], c2, c3, kernel_size=3, padding=1, bias=False)
        self.phi3_bn   = nn.BatchNorm2d(c3)
        self.phi3_act  = StochasticActivation(*quant_scheme['phi3_act'], c3)
        self.phi4_conv = StochasticConv2d(*quant_scheme['phi4_conv'], c3, c4, kernel_size=3, padding=1, bias=False)
        self.phi4_bn   = nn.BatchNorm2d(c4)
        self.phi4_act  = StochasticActivation(*quant_scheme['phi4_act'], c4)
        self.phi5_conv = StochasticConv2d(*quant_scheme['phi5_conv'], c4, c5, kernel_size=3, padding=1, bias=False)
        self.phi5_mp   = nn.MaxPool2d(kernel_size=3, stride=2)
        self.phi5_bn   = nn.BatchNorm2d(c5)
        self.phi5_act  = StochasticActivation(*quant_scheme['phi5_act'], c5)
        # dense layers
        self.phi6_fc   = StochasticLinear(*quant_scheme['phi6_fc'], c5 * 6 * 6, nh, bias=False)
        self.phi6_bn   = nn.BatchNorm1d(nh)
        self.phi6_act  = StochasticActivation(*quant_scheme['phi6_act'], nh)
        self.phi7_fc   = StochasticLinear(*quant_scheme['phi7_fc'], nh, nh, bias=False)
        self.phi7_bn   = nn.BatchNorm1d(nh)
        self.phi7_act  = StochasticActivation(*quant_scheme['phi7_act'], nh)
        self.phi8_fc   = StochasticLinear(*quant_scheme['phi8_fc'], nh, 1000, bias=False)
        self.phi8_bn   = nn.BatchNorm1d(1000)

    def forward(self, x):
        x = self.phi1_conv(x)
        x = self.phi1_mp(x)
        x = self.phi1_bn(x)
        x = self.phi1_act(x)
        x = self.phi2_conv(x)
        x = self.phi2_mp(x)
        x = self.phi2_bn(x)
        x = self.phi2_act(x)
        x = self.phi3_conv(x)
        x = self.phi3_bn(x)
        x = self.phi3_act(x)
        x = self.phi4_conv(x)
        x = self.phi4_bn(x)
        x = self.phi4_act(x)
        x = self.phi5_conv(x)
        x = self.phi5_mp(x)
        x = self.phi5_bn(x)
        x = self.phi5_act(x)
        x = x.view(-1, torch.Tensor(list(x.size()[-3:])).to(torch.int32).prod().item())
        x = self.phi6_fc(x)
        x = self.phi6_bn(x)
        x = self.phi6_act(x)
        x = self.phi7_fc(x)
        x = self.phi7_bn(x)
        x = self.phi7_act(x)
        x = self.phi8_fc(x)
        x = self.phi8_bn(x)
        return x

    def forward_with_tensor_stats(self, x):
        stats = []
        x = self.phi1_conv(x)
        stats.append(('phi1_conv_w', self.phi1_conv.weight.data))
        x = self.phi1_mp(x)
        x = self.phi1_bn(x)
        x = self.phi1_act(x)
        x = self.phi2_conv(x)
        stats.append(('phi2_conv_w', self.phi2_conv.weight.data))
        x = self.phi2_mp(x)
        x = self.phi2_bn(x)
        x = self.phi2_act(x)
        x = self.phi3_conv(x)
        stats.append(('phi3_conv_w', self.phi3_conv.weight.data))
        x = self.phi3_bn(x)
        x = self.phi3_act(x)
        x = self.phi4_conv(x)
        stats.append(('phi4_conv_w', self.phi4_conv.weight.data))
        x = self.phi4_bn(x)
        x = self.phi4_act(x)
        x = self.phi5_conv(x)
        stats.append(('phi5_conv_w', self.phi5_conv.weight.data))
        x = self.phi5_mp(x)
        x = self.phi5_bn(x)
        x = self.phi5_act(x)
        x = x.view(-1, torch.Tensor(list(x.size()[-3:])).to(torch.int32).prod().item())
        x = self.phi6_fc(x)
        stats.append(('phi6_fc_w', self.phi6_fc.weight.data))
        x = self.phi6_bn(x)
        x = self.phi6_act(x)
        x = self.phi7_fc(x)
        stats.append(('phi7_fc_w', self.phi7_fc.weight.data))
        x = self.phi7_bn(x)
        x = self.phi7_act(x)
        x = self.phi8_fc(x)
        stats.append(('phi8_fc_w', self.phi8_fc.weight.data))
        x = self.phi8_bn(x)
        return x, stats


class MobileNetV2Residuals(nn.Module):
    """MobileNetv2 Convolutional Neural Network."""
    def __init__(self, capacity, expansion, quant_scheme):
        super(MobileNetV2Residuals, self).__init__()
        c0 = 3
        t0 = int(32 * capacity) * 1
        c1 = int(16 * capacity)
        t1 = c1 * expansion
        c2 = int(24 * capacity)
        t2 = c2 * expansion
        c3 = int(32 * capacity)
        t3 = c3 * expansion
        c4 = int(64 * capacity)
        t4 = c4 * expansion
        c5 = int(96 * capacity)
        t5 = c5 * expansion
        c6 = int(160 * capacity)
        t6 = c6 * expansion
        c7 = int(320 * capacity)
        c8 = max(int(1280 * capacity), 1280)
        # first block
        self.phi01_conv = nn.Conv2d(c0, t0, kernel_size=3, stride=2, padding=1, bias=False)
        self.phi01_bn   = nn.BatchNorm2d(t0)
        self.phi01_act  = nn.ReLU6(inplace=True)
        self.phi02_conv = nn.Conv2d(t0, t0, kernel_size=3, stride=1, padding=1, groups=t0, bias=False)
        self.phi02_bn   = nn.BatchNorm2d(t0)
        self.phi02_act  = nn.ReLU6(inplace=True)
        self.phi03_conv = nn.Conv2d(t0, c1, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi03_bn   = nn.BatchNorm2d(c1)
        # second block
        self.phi04_conv = nn.Conv2d(c1, t1, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi04_bn   = nn.BatchNorm2d(t1)
        self.phi04_act  = nn.ReLU6(inplace=True)
        self.phi05_conv = nn.Conv2d(t1, t1, kernel_size=3, stride=2, padding=1, groups=t1, bias=False)
        self.phi05_bn   = nn.BatchNorm2d(t1)
        self.phi05_act  = nn.ReLU6(inplace=True)
        self.phi06_conv = nn.Conv2d(t1, c2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi06_bn   = nn.BatchNorm2d(c2)
        self.phi06_act  = StochasticActivation(*quant_scheme['phi06_act'], c2)
        self.phi07_conv = StochasticConv2d(*quant_scheme['phi07_conv'], c2, t2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi07_bn   = nn.BatchNorm2d(t2)
        self.phi07_act  = StochasticActivation(*quant_scheme['phi07_act'], t2)
        self.phi08_conv = StochasticConv2d(*quant_scheme['phi08_conv'], t2, t2, kernel_size=3, stride=1, padding=1, groups=t2, bias=False)
        self.phi08_bn   = nn.BatchNorm2d(t2)
        self.phi08_act  = StochasticActivation(*quant_scheme['phi08_act'], t2)
        self.phi09_conv = StochasticConv2d(*quant_scheme['phi09_conv'], t2, c2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi09_bn   = nn.BatchNorm2d(c2)
        # third block
        self.phi10_conv = nn.Conv2d(c2, t2, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi10_bn   = nn.BatchNorm2d(t2)
        self.phi10_act  = nn.ReLU6(inplace=True)
        self.phi11_conv = nn.Conv2d(t2, t2, kernel_size=3, stride=2, padding=1, groups=t2, bias=False)
        self.phi11_bn   = nn.BatchNorm2d(t2)
        self.phi11_act  = nn.ReLU6(inplace=True)
        self.phi12_conv = nn.Conv2d(t2, c3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi12_bn   = nn.BatchNorm2d(c3)
        self.phi12_act  = StochasticActivation(*quant_scheme['phi12_act'], c3)
        self.phi13_conv = StochasticConv2d(*quant_scheme['phi13_conv'], c3, t3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi13_bn   = nn.BatchNorm2d(t3)
        self.phi13_act  = StochasticActivation(*quant_scheme['phi13_act'], t3)
        self.phi14_conv = StochasticConv2d(*quant_scheme['phi14_conv'], t3, t3, kernel_size=3, stride=1, padding=1, groups=t3, bias=False)
        self.phi14_bn   = nn.BatchNorm2d(t3)
        self.phi14_act  = StochasticActivation(*quant_scheme['phi14_act'], t3)
        self.phi15_conv = StochasticConv2d(*quant_scheme['phi15_conv'], t3, c3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi15_bn   = nn.BatchNorm2d(c3)
        self.phi15_act  = StochasticActivation(*quant_scheme['phi15_act'], c3)
        self.phi16_conv = StochasticConv2d(*quant_scheme['phi16_conv'], c3, t3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi16_bn   = nn.BatchNorm2d(t3)
        self.phi16_act  = StochasticActivation(*quant_scheme['phi16_act'], t3)
        self.phi17_conv = StochasticConv2d(*quant_scheme['phi17_conv'], t3, t3, kernel_size=3, stride=1, padding=1, groups=t3, bias=False)
        self.phi17_bn   = nn.BatchNorm2d(t3)
        self.phi17_act  = StochasticActivation(*quant_scheme['phi17_act'], t3)
        self.phi18_conv = StochasticConv2d(*quant_scheme['phi18_conv'], t3, c3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi18_bn   = nn.BatchNorm2d(c3)
        # fourth block
        self.phi19_conv = nn.Conv2d(c3, t3, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi19_bn   = nn.BatchNorm2d(t3)
        self.phi19_act  = nn.ReLU6(inplace=True)
        self.phi20_conv = nn.Conv2d(t3, t3, kernel_size=3, stride=2, padding=1, groups=t3, bias=False)
        self.phi20_bn   = nn.BatchNorm2d(t3)
        self.phi20_act  = nn.ReLU6(inplace=True)
        self.phi21_conv = nn.Conv2d(t3, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi21_bn   = nn.BatchNorm2d(c4)
        self.phi21_act  = StochasticActivation(*quant_scheme['phi21_act'], c4)
        self.phi22_conv = StochasticConv2d(*quant_scheme['phi22_conv'], c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi22_bn   = nn.BatchNorm2d(t4)
        self.phi22_act  = StochasticActivation(*quant_scheme['phi22_act'], t4)
        self.phi23_conv = StochasticConv2d(*quant_scheme['phi23_conv'], t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi23_bn   = nn.BatchNorm2d(t4)
        self.phi23_act  = StochasticActivation(*quant_scheme['phi23_act'], t4)
        self.phi24_conv = StochasticConv2d(*quant_scheme['phi24_conv'], t4, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi24_bn   = nn.BatchNorm2d(c4)
        self.phi24_act  = StochasticActivation(*quant_scheme['phi24_act'], c4)
        self.phi25_conv = StochasticConv2d(*quant_scheme['phi25_conv'], c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi25_bn   = nn.BatchNorm2d(t4)
        self.phi25_act  = StochasticActivation(*quant_scheme['phi25_act'], t4)
        self.phi26_conv = StochasticConv2d(*quant_scheme['phi26_conv'], t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi26_bn   = nn.BatchNorm2d(t4)
        self.phi26_act  = StochasticActivation(*quant_scheme['phi26_act'], t4)
        self.phi27_conv = StochasticConv2d(*quant_scheme['phi27_conv'], t4, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi27_bn   = nn.BatchNorm2d(c4)
        self.phi27_act  = StochasticActivation(*quant_scheme['phi27_act'], c4)
        self.phi28_conv = StochasticConv2d(*quant_scheme['phi28_conv'], c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi28_bn   = nn.BatchNorm2d(t4)
        self.phi28_act  = StochasticActivation(*quant_scheme['phi28_act'], t4)
        self.phi29_conv = StochasticConv2d(*quant_scheme['phi29_conv'], t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi29_bn   = nn.BatchNorm2d(t4)
        self.phi29_act  = StochasticActivation(*quant_scheme['phi29_act'], t4)
        self.phi30_conv = StochasticConv2d(*quant_scheme['phi30_conv'], t4, c4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi30_bn   = nn.BatchNorm2d(c4)
        # fifth block
        self.phi31_conv = nn.Conv2d(c4, t4, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi31_bn   = nn.BatchNorm2d(t4)
        self.phi31_act  = nn.ReLU6(inplace=True)
        self.phi32_conv = nn.Conv2d(t4, t4, kernel_size=3, stride=1, padding=1, groups=t4, bias=False)
        self.phi32_bn   = nn.BatchNorm2d(t4)
        self.phi32_act  = nn.ReLU6(inplace=True)
        self.phi33_conv = nn.Conv2d(t4, c5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi33_bn   = nn.BatchNorm2d(c5)
        self.phi33_act  = StochasticActivation(*quant_scheme['phi33_act'], c5)
        self.phi34_conv = StochasticConv2d(*quant_scheme['phi34_conv'], c5, t5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi34_bn   = nn.BatchNorm2d(t5)
        self.phi34_act  = StochasticActivation(*quant_scheme['phi34_act'], t5)
        self.phi35_conv = StochasticConv2d(*quant_scheme['phi35_conv'], t5, t5, kernel_size=3, stride=1, padding=1, groups=t5, bias=False)
        self.phi35_bn   = nn.BatchNorm2d(t5)
        self.phi35_act  = StochasticActivation(*quant_scheme['phi35_act'], t5)
        self.phi36_conv = StochasticConv2d(*quant_scheme['phi36_conv'], t5, c5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi36_bn   = nn.BatchNorm2d(c5)
        self.phi36_act  = StochasticActivation(*quant_scheme['phi36_act'], c5)
        self.phi37_conv = StochasticConv2d(*quant_scheme['phi37_conv'], c5, t5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi37_bn   = nn.BatchNorm2d(t5)
        self.phi37_act  = StochasticActivation(*quant_scheme['phi37_act'], t5)
        self.phi38_conv = StochasticConv2d(*quant_scheme['phi38_conv'], t5, t5, kernel_size=3, stride=1, padding=1, groups=t5, bias=False)
        self.phi38_bn   = nn.BatchNorm2d(t5)
        self.phi38_act  = StochasticActivation(*quant_scheme['phi38_act'], t5)
        self.phi39_conv = StochasticConv2d(*quant_scheme['phi39_conv'], t5, c5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi39_bn   = nn.BatchNorm2d(c5)
        # sixth block
        self.phi40_conv = nn.Conv2d(c5, t5, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi40_bn   = nn.BatchNorm2d(t5)
        self.phi40_act  = nn.ReLU6(inplace=True)
        self.phi41_conv = nn.Conv2d(t5, t5, kernel_size=3, stride=2, padding=1, groups=t5, bias=False)
        self.phi41_bn   = nn.BatchNorm2d(t5)
        self.phi41_act  = nn.ReLU6(inplace=True)
        self.phi42_conv = nn.Conv2d(t5, c6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi42_bn   = nn.BatchNorm2d(c6)
        self.phi42_act  = StochasticActivation(*quant_scheme['phi42_act'], c6)
        self.phi43_conv = StochasticConv2d(*quant_scheme['phi43_conv'], c6, t6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi43_bn   = nn.BatchNorm2d(t6)
        self.phi43_act  = StochasticActivation(*quant_scheme['phi43_act'], t6)
        self.phi44_conv = StochasticConv2d(*quant_scheme['phi44_conv'], t6, t6, kernel_size=3, stride=1, padding=1, groups=t6, bias=False)
        self.phi44_bn   = nn.BatchNorm2d(t6)
        self.phi44_act  = StochasticActivation(*quant_scheme['phi44_act'], t6)
        self.phi45_conv = StochasticConv2d(*quant_scheme['phi45_conv'], t6, c6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi45_bn   = nn.BatchNorm2d(c6)
        self.phi45_act  = StochasticActivation(*quant_scheme['phi45_act'], c6)
        self.phi46_conv = StochasticConv2d(*quant_scheme['phi46_conv'], c6, t6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi46_bn   = nn.BatchNorm2d(t6)
        self.phi46_act  = StochasticActivation(*quant_scheme['phi46_act'], t6)
        self.phi47_conv = StochasticConv2d(*quant_scheme['phi47_conv'], t6, t6, kernel_size=3, stride=1, padding=1, groups=t6, bias=False)
        self.phi47_bn   = nn.BatchNorm2d(t6)
        self.phi47_act  = StochasticActivation(*quant_scheme['phi47_act'], t6)
        self.phi48_conv = StochasticConv2d(*quant_scheme['phi48_conv'], t6, c6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi48_bn   = nn.BatchNorm2d(c6)
        # seventh block
        self.phi49_conv = nn.Conv2d(c6, t6, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi49_bn   = nn.BatchNorm2d(t6)
        self.phi49_act  = nn.ReLU6(inplace=True)
        self.phi50_conv = nn.Conv2d(t6, t6, kernel_size=3, stride=1, padding=1, groups=t6, bias=False)
        self.phi50_bn   = nn.BatchNorm2d(t6)
        self.phi50_act  = nn.ReLU6(inplace=True)
        self.phi51_conv = nn.Conv2d(t6, c7, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi51_bn   = nn.BatchNorm2d(c7)
        # classifier
        self.phi52_conv = nn.Conv2d(c7, c8, kernel_size=1, stride=1, padding=0, bias=False)
        self.phi52_bn   = nn.BatchNorm2d(c8)
        self.phi52_act  = nn.ReLU6(inplace=True)
        self.phi53_avg  = nn.AvgPool2d(kernel_size=7, stride=1, padding=0)
        self.phi53_fc   = nn.Linear(c8, 1000)

        self._initialize_weights()

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
                if m.bias is not None:
                    m.bias.data.zero_()
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()
            elif isinstance(m, nn.Linear):
                m.weight.data.normal_(0, 0.01)
                m.bias.data.zero_()

    def forward(self, x):
        # first block
        x     = self.phi01_conv(x)
        x     = self.phi01_bn(x)
        x     = self.phi01_act(x)
        x     = self.phi02_conv(x)
        x     = self.phi02_bn(x)
        x     = self.phi02_act(x)
        x     = self.phi03_conv(x)
        x     = self.phi03_bn(x)
        # second block
        x     = self.phi04_conv(x)
        x     = self.phi04_bn(x)
        x     = self.phi04_act(x)
        x     = self.phi05_conv(x)
        x     = self.phi05_bn(x)
        x     = self.phi05_act(x)
        x     = self.phi06_conv(x)
        x     = self.phi06_bn(x)
        x_res = self.phi06_act(x)
        x_res = self.phi07_conv(x_res)
        x_res = self.phi07_bn(x_res)
        x_res = self.phi07_act(x_res)
        x_res = self.phi08_conv(x_res)
        x_res = self.phi08_bn(x_res)
        x_res = self.phi08_act(x_res)
        x_res = self.phi09_conv(x_res)
        x_res = self.phi09_bn(x_res)
        x     = x + x_res
        # third block
        x     = self.phi10_conv(x)
        x     = self.phi10_bn(x)
        x     = self.phi10_act(x)
        x     = self.phi11_conv(x)
        x     = self.phi11_bn(x)
        x     = self.phi11_act(x)
        x     = self.phi12_conv(x)
        x     = self.phi12_bn(x)
        x_res = self.phi12_act(x)
        x_res = self.phi13_conv(x_res)
        x_res = self.phi13_bn(x_res)
        x_res = self.phi13_act(x_res)
        x_res = self.phi14_conv(x_res)
        x_res = self.phi14_bn(x_res)
        x_res = self.phi14_act(x_res)
        x_res = self.phi15_conv(x_res)
        x_res = self.phi15_bn(x_res)
        x     = x + x_res
        x_res = self.phi15_act(x)
        x_res = self.phi16_conv(x_res)
        x_res = self.phi16_bn(x_res)
        x_res = self.phi16_act(x_res)
        x_res = self.phi17_conv(x_res)
        x_res = self.phi17_bn(x_res)
        x_res = self.phi17_act(x_res)
        x_res = self.phi18_conv(x_res)
        x_res = self.phi18_bn(x_res)
        x     = x + x_res
        # fourth block
        x     = self.phi19_conv(x)
        x     = self.phi19_bn(x)
        x     = self.phi19_act(x)
        x     = self.phi20_conv(x)
        x     = self.phi20_bn(x)
        x     = self.phi20_act(x)
        x     = self.phi21_conv(x)
        x     = self.phi21_bn(x)
        x_res = self.phi21_act(x)
        x_res = self.phi22_conv(x_res)
        x_res = self.phi22_bn(x_res)
        x_res = self.phi22_act(x_res)
        x_res = self.phi23_conv(x_res)
        x_res = self.phi23_bn(x_res)
        x_res = self.phi23_act(x_res)
        x_res = self.phi24_conv(x_res)
        x_res = self.phi24_bn(x_res)
        x     = x + x_res
        x_res = self.phi24_act(x)
        x_res = self.phi25_conv(x_res)
        x_res = self.phi25_bn(x_res)
        x_res = self.phi25_act(x_res)
        x_res = self.phi26_conv(x_res)
        x_res = self.phi26_bn(x_res)
        x_res = self.phi26_act(x_res)
        x_res = self.phi27_conv(x_res)
        x_res = self.phi27_bn(x_res)
        x     = x + x_res
        x_res = self.phi27_act(x)
        x_res = self.phi28_conv(x_res)
        x_res = self.phi28_bn(x_res)
        x_res = self.phi28_act(x_res)
        x_res = self.phi29_conv(x_res)
        x_res = self.phi29_bn(x_res)
        x_res = self.phi29_act(x_res)
        x_res = self.phi30_conv(x_res)
        x_res = self.phi30_bn(x_res)
        x     = x + x_res
        # fifth block
        x     = self.phi31_conv(x)
        x     = self.phi31_bn(x)
        x     = self.phi31_act(x)
        x     = self.phi32_conv(x)
        x     = self.phi32_bn(x)
        x     = self.phi32_act(x)
        x     = self.phi33_conv(x)
        x     = self.phi33_bn(x)
        x_res = self.phi33_act(x)
        x_res = self.phi34_conv(x_res)
        x_res = self.phi34_bn(x_res)
        x_res = self.phi34_act(x_res)
        x_res = self.phi35_conv(x_res)
        x_res = self.phi35_bn(x_res)
        x_res = self.phi35_act(x_res)
        x_res = self.phi36_conv(x_res)
        x_res = self.phi36_bn(x_res)
        x     = x + x_res
        x_res = self.phi36_act(x)
        x_res = self.phi37_conv(x_res)
        x_res = self.phi37_bn(x_res)
        x_res = self.phi37_act(x_res)
        x_res = self.phi38_conv(x_res)
        x_res = self.phi38_bn(x_res)
        x_res = self.phi38_act(x_res)
        x_res = self.phi39_conv(x_res)
        x_res = self.phi39_bn(x_res)
        x     = x + x_res
        # sixth block
        x     = self.phi40_conv(x)
        x     = self.phi40_bn(x)
        x     = self.phi40_act(x)
        x     = self.phi41_conv(x)
        x     = self.phi41_bn(x)
        x     = self.phi41_act(x)
        x     = self.phi42_conv(x)
        x     = self.phi42_bn(x)
        x_res = self.phi42_act(x)
        x_res = self.phi43_conv(x_res)
        x_res = self.phi43_bn(x_res)
        x_res = self.phi43_act(x_res)
        x_res = self.phi44_conv(x_res)
        x_res = self.phi44_bn(x_res)
        x_res = self.phi44_act(x_res)
        x_res = self.phi45_conv(x_res)
        x_res = self.phi45_bn(x_res)
        x     = x + x_res
        x_res = self.phi45_act(x)
        x_res = self.phi46_conv(x_res)
        x_res = self.phi46_bn(x_res)
        x_res = self.phi46_act(x_res)
        x_res = self.phi47_conv(x_res)
        x_res = self.phi47_bn(x_res)
        x_res = self.phi47_act(x_res)
        x_res = self.phi48_conv(x_res)
        x_res = self.phi48_bn(x_res)
        x     = x + x_res
        # seventh block
        x     = self.phi49_conv(x)
        x     = self.phi49_bn(x)
        x     = self.phi49_act(x)
        x     = self.phi50_conv(x)
        x     = self.phi50_bn(x)
        x     = self.phi50_act(x)
        x     = self.phi51_conv(x)
        x     = self.phi51_bn(x)
        # classifier
        x     = self.phi52_conv(x)
        x     = self.phi52_bn(x)
        x     = self.phi52_act(x)
        x     = self.phi53_avg(x)
        x     = x.view(x.size(0), -1)
        x     = self.phi53_fc(x)
        return x

    def forward_with_tensor_stats(self, x):
        stats = []
        # first block
        x     = self.phi01_conv(x)
        x     = self.phi01_bn(x)
        x     = self.phi01_act(x)
        x     = self.phi02_conv(x)
        x     = self.phi02_bn(x)
        x     = self.phi02_act(x)
        x     = self.phi03_conv(x)
        x     = self.phi03_bn(x)
        # second block
        x     = self.phi04_conv(x)
        x     = self.phi04_bn(x)
        x     = self.phi04_act(x)
        x     = self.phi05_conv(x)
        x     = self.phi05_bn(x)
        x     = self.phi05_act(x)
        x     = self.phi06_conv(x)
        x     = self.phi06_bn(x)
        x_res = self.phi06_act(x)
        x_res = self.phi07_conv(x_res)
        x_res = self.phi07_bn(x_res)
        x_res = self.phi07_act(x_res)
        x_res = self.phi08_conv(x_res)
        x_res = self.phi08_bn(x_res)
        x_res = self.phi08_act(x_res)
        x_res = self.phi09_conv(x_res)
        x_res = self.phi09_bn(x_res)
        x     = x + x_res
        # third block
        x     = self.phi10_conv(x)
        x     = self.phi10_bn(x)
        x     = self.phi10_act(x)
        x     = self.phi11_conv(x)
        x     = self.phi11_bn(x)
        x     = self.phi11_act(x)
        x     = self.phi12_conv(x)
        x     = self.phi12_bn(x)
        x_res = self.phi12_act(x)
        x_res = self.phi13_conv(x_res)
        x_res = self.phi13_bn(x_res)
        x_res = self.phi13_act(x_res)
        x_res = self.phi14_conv(x_res)
        x_res = self.phi14_bn(x_res)
        x_res = self.phi14_act(x_res)
        x_res = self.phi15_conv(x_res)
        x_res = self.phi15_bn(x_res)
        x     = x + x_res
        x_res = self.phi15_act(x)
        x_res = self.phi16_conv(x_res)
        x_res = self.phi16_bn(x_res)
        x_res = self.phi16_act(x_res)
        x_res = self.phi17_conv(x_res)
        x_res = self.phi17_bn(x_res)
        x_res = self.phi17_act(x_res)
        x_res = self.phi18_conv(x_res)
        x_res = self.phi18_bn(x_res)
        x     = x + x_res
        # fourth block
        x     = self.phi19_conv(x)
        x     = self.phi19_bn(x)
        x     = self.phi19_act(x)
        x     = self.phi20_conv(x)
        x     = self.phi20_bn(x)
        x     = self.phi20_act(x)
        x     = self.phi21_conv(x)
        x     = self.phi21_bn(x)
        x_res = self.phi21_act(x)
        x_res = self.phi22_conv(x_res)
        x_res = self.phi22_bn(x_res)
        x_res = self.phi22_act(x_res)
        x_res = self.phi23_conv(x_res)
        x_res = self.phi23_bn(x_res)
        x_res = self.phi23_act(x_res)
        x_res = self.phi24_conv(x_res)
        x_res = self.phi24_bn(x_res)
        x     = x + x_res
        x_res = self.phi24_act(x)
        x_res = self.phi25_conv(x_res)
        x_res = self.phi25_bn(x_res)
        x_res = self.phi25_act(x_res)
        x_res = self.phi26_conv(x_res)
        x_res = self.phi26_bn(x_res)
        x_res = self.phi26_act(x_res)
        x_res = self.phi27_conv(x_res)
        x_res = self.phi27_bn(x_res)
        x     = x + x_res
        x_res = self.phi27_act(x)
        x_res = self.phi28_conv(x_res)
        x_res = self.phi28_bn(x_res)
        x_res = self.phi28_act(x_res)
        x_res = self.phi29_conv(x_res)
        x_res = self.phi29_bn(x_res)
        x_res = self.phi29_act(x_res)
        x_res = self.phi30_conv(x_res)
        x_res = self.phi30_bn(x_res)
        x     = x + x_res
        # fifth block
        x     = self.phi31_conv(x)
        x     = self.phi31_bn(x)
        x     = self.phi31_act(x)
        x     = self.phi32_conv(x)
        x     = self.phi32_bn(x)
        x     = self.phi32_act(x)
        x     = self.phi33_conv(x)
        x     = self.phi33_bn(x)
        x_res = self.phi33_act(x)
        x_res = self.phi34_conv(x_res)
        x_res = self.phi34_bn(x_res)
        x_res = self.phi34_act(x_res)
        x_res = self.phi35_conv(x_res)
        x_res = self.phi35_bn(x_res)
        x_res = self.phi35_act(x_res)
        x_res = self.phi36_conv(x_res)
        x_res = self.phi36_bn(x_res)
        x     = x + x_res
        x_res = self.phi36_act(x)
        x_res = self.phi37_conv(x_res)
        x_res = self.phi37_bn(x_res)
        x_res = self.phi37_act(x_res)
        x_res = self.phi38_conv(x_res)
        x_res = self.phi38_bn(x_res)
        x_res = self.phi38_act(x_res)
        x_res = self.phi39_conv(x_res)
        x_res = self.phi39_bn(x_res)
        x     = x + x_res
        # sixth block
        x     = self.phi40_conv(x)
        x     = self.phi40_bn(x)
        x     = self.phi40_act(x)
        x     = self.phi41_conv(x)
        x     = self.phi41_bn(x)
        x     = self.phi41_act(x)
        x     = self.phi42_conv(x)
        x     = self.phi42_bn(x)
        x_res = self.phi42_act(x)
        x_res = self.phi43_conv(x_res)
        x_res = self.phi43_bn(x_res)
        x_res = self.phi43_act(x_res)
        x_res = self.phi44_conv(x_res)
        x_res = self.phi44_bn(x_res)
        x_res = self.phi44_act(x_res)
        x_res = self.phi45_conv(x_res)
        x_res = self.phi45_bn(x_res)
        x     = x + x_res
        x_res = self.phi45_act(x)
        x_res = self.phi46_conv(x_res)
        x_res = self.phi46_bn(x_res)
        x_res = self.phi46_act(x_res)
        x_res = self.phi47_conv(x_res)
        x_res = self.phi47_bn(x_res)
        x_res = self.phi47_act(x_res)
        x_res = self.phi48_conv(x_res)
        x_res = self.phi48_bn(x_res)
        x     = x + x_res
        # seventh block
        x     = self.phi49_conv(x)
        x     = self.phi49_bn(x)
        x     = self.phi49_act(x)
        x     = self.phi50_conv(x)
        x     = self.phi50_bn(x)
        x     = self.phi50_act(x)
        x     = self.phi51_conv(x)
        x     = self.phi51_bn(x)
        # classifier
        x     = self.phi52_conv(x)
        x     = self.phi52_bn(x)
        x     = self.phi52_act(x)
        x     = self.phi53_avg(x)
        x     = x.view(x.size(0), -1)
        x     = self.phi53_fc(x)
        return x, stats
